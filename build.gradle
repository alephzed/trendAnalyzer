plugins {
    id("com.gradle.build-scan") version "2.4.2"
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'java'
    id("com.github.kt3k.coveralls") version "2.8.4"
    id("com.palantir.docker-run") version "0.22.1"
    id('com.moowork.node') version "1.3.1"
}
//apply(from = "gradle/git-version-data.gradle")
//apply(from = "gradle/build-scan-data.gradle")

group = 'com.herringbone'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation(platform("org.springframework.boot:spring-boot-dependencies:2.2.1.RELEASE"))
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("org.hsqldb:hsqldb:2.3.3")
    implementation("javax.xml.bind:jaxb-api:2.2.11")
    implementation("javax.validation:validation-api:1.1.0.Final")
    implementation("org.postgresql:postgresql:9.4-1203-jdbc42")
    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    implementation('org.apache.commons:commons-math:2.0')
    implementation('org.mapstruct:mapstruct:1.3.1.Final')
    annotationProcessor('org.mapstruct:mapstruct-processor:1.3.1.Final')
    implementation('org.apache.commons:commons-lang3:3.9')
    implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.10.0')
    implementation('com.fasterxml.jackson.core:jackson-core:2.10.0')
    implementation('org.apache.httpcomponents:httpclient:4.5.10')

    testImplementation(platform("org.springframework.boot:spring-boot-dependencies:2.1.8.RELEASE"))
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.2")
    testImplementation("org.assertj:assertj-core:3.13.2")
    testImplementation("io.mockk:mockk:1.9")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks {
    processResources {
        filesMatching("**/*.properties") {
            expand(project.properties)
        }
    }

    compileJava {
        options.encoding = "UTF-8"
    }

    test {
        useJUnitPlatform()
    }


    bootJar {
        archiveFileName.set("app.jar")
    }

    bootRun {
        if (project.hasProperty("postgres")) {
            setArgsString("--spring.profiles.active=postgres")
        }
    }

    node {
        // Version of node to use.
        version = '4.4.5'

        // Version of npm to use.
        npmVersion = '3.9.2'

        // Base URL for fetching node distributions (change if you have a mirror).
        distBaseUrl = 'https://nodejs.org/dist'

        // If true, it will download node using above parameters.
        // If false, it will try to use globally installed node.
        download = true

        // Set the work directory for unpacking node
        workDir = file("${project.buildDir}/nodejs")

        // Set the work directory where node_modules should be located
        nodeModulesDir = file("${project.projectDir}")
    }
}

dockerRun {
    image = "postgres:9.4.4"
    name = "postgres-db"
    ports("5432:5432")
    env(
            "POSTGRES_PASSWORD" : "spring-boot-heroku-example",
            "POSTGRES_USER" : "spring-boot-heroku-example"
    )
}

buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"

    publishAlways()
}

task webpack(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('node_modules/.bin/webpack')
}

build.dependsOn(npm_install)
